#!/usr/bin/env ruby

require 'pry'
require 'asciiart'
require 'digest/md5'

SELF_DIR = File.expand_path("../", __FILE__)
# abs path to the script resources directory
RES_DIR = "#{SELF_DIR}/res"
# animation velocity in [fps]"
ANIM_VELOCITY = 10.0
# splitter string in cache
SPLITTER = "\n>>>>\n\n"

def cache_is_outdated(filenames)
  cached_checksums = File.open("#{RES_DIR}/cache.info").collect { |line| line.chomp.split(/\s*<=>\s*/) }.to_h

  if cached_checksums.size == filenames.size
    filenames.each do |fname|
      return true if cached_checksums[fname] != Digest::MD5.hexdigest(File.open(fname).read)
    end
    return false
  end

  return true
end

def save_cache_info(filenames)
  File.open("#{RES_DIR}/cache.info", "w") do |file|
    filenames.each do |fname|
      file.puts("#{fname} <=> #{Digest::MD5.hexdigest(File.open(fname).read)}") 
    end
  end
end

def save_cache(frames)
  File.open("#{RES_DIR}/cache", "w") do |file|
    frames.each { |frame| file.puts(frame, SPLITTER) }
  end
end


filenames = Dir["#{RES_DIR}/*.gif"].sort_by { |it| File.basename(it, ".gif").to_i  }

if cache_is_outdated(filenames)
  puts "Please wait while the cache is updated..."
  save_cache_info(filenames)
  frames = filenames.map { |it| AsciiArt.new("#{it}").to_ascii_art }
  save_cache(frames)
else
  frames = File.open("#{RES_DIR}/cache").inject(:+).split(SPLITTER)
end

3.times do |_|
  frames.each do |frame| 
    system "clear"
    puts frame 
    sleep 1 / ANIM_VELOCITY
  end
end
